import { FixedSizeList } from "react-window";
import AutoSizer from "react-virtualized-auto-sizer";
// const [isRatingVisible, setIsRatingVisible] = useState(false);
{
  /* <tbody style={{ height: "calc(100vh - 200px)" }}>
            <AutoSizer>
              {({ height, width }) => (
                <FixedSizeList
                  height={height}
                  width={width}
                  itemCount={students.length}
                  itemSize={50}
                  itemData={{
                    students,
                    events,
                    attendance,
                    handleAttendanceChange,
                  }}
                  overscanCount={20} // Рендерим дополнительные строки для плавности
                >
                  {Row}
                </FixedSizeList>
              )}
            </AutoSizer>
          </tbody> */
}
// const [groupName, setGroupName] = useState();
// const [isSidebarOpen, setIsSidebarOpen] = useState(false);
// const [filteredData, setFilteredData] = useState([]);
// const [filterType, setFilterType] = useState("students");
// const [filterDescription,

// const toggleSidebar = () => setIsSidebarOpen((prev) => !prev);

// const handleFilterApply = ({
//   data,
//   type,
//   groupName: selectedGroupName,
//   course,
//   departmentName,
//   sort,
//   customSort,
// }) => {
//   try {
//     let timeDescription = "";
//     switch (sort) {
//       case "all":
//         timeDescription = "за всё время";
//         break;
//       case "week":
//         timeDescription = "за неделю";
//         break;
//       case "month":
//         timeDescription = "за месяц";
//         break;
//       case "halfYear":
//         timeDescription = "за полгода";
//         break;
//       case "custom":
//         timeDescription = customSort ? `за период ${customSort}` : "";
//         break;
//       default:
//         timeDescription = "";
//         break;
//     }

//     if (type === "students") {
//       const studentList = data.map((student) => ({
//         id: student.studentId,
//         name: student.fullName,
//       }));
//       const eventList = data[0].events.map((event, index) => ({
//         name: event.name,
//         key: `event${index + 1}`,
//       }));
//       const attendanceData = data.reduce((acc, student) => {
//         acc[student.studentId] = {};
//         student.events.forEach((event, index) => {
//           acc[student.studentId][`event${index + 1}`] =
//             event.point.toString();
//         });
//         return acc;
//       }, {});

//       setStudents(studentList);
//       setEvents(eventList);
//       setAttendance(attendanceData);
//       setGroupName(selectedGroupName || "Все студенты");
//       setFilterDescription(
//         selectedGroupName
//           ? `Студенты группы ${selectedGroupName} ${timeDescription}`
//           : `Список всех студентов ${timeDescription}`
//       );
//       setFilterType("students");
//     } else if (type === "groups") {
//       const eventList = data[0].events.map((event, index) => ({
//         name: event.name,
//         key: `event${index + 1}`,
//       }));
//       const attendanceData = data.reduce((acc, item) => {
//         acc[item.id] = {};
//         item.events.forEach((event, index) => {
//           acc[item.id][`event${index + 1}`] = event.point.toString();
//         });
//         return acc;
//       }, {});
//       const groupList = data.map((item) => ({
//         id: item.id,
//         name: item.groupeName,
//       }));

//       setStudents(groupList);
//       setEvents(eventList);
//       setAttendance(attendanceData);
//       setGroupName("Группы");
//       setFilterDescription(
//         course
//           ? `Группы ${course} курса ${timeDescription}`
//           : departmentName
//           ? `Группы отделения ${departmentName} ${timeDescription}`
//           : `Группы ${timeDescription}`
//       );
//       setFilterType("groups");
//     } else if (type === "departments") {
//       const eventList = data[0].events.map((event, index) => ({
//         name: event.name,
//         key: `event${index + 1}`,
//       }));
//       const attendanceData = data.reduce((acc, item) => {
//         acc[item.id] = {};
//         item.events.forEach((event, index) => {
//           acc[item.id][`event${index + 1}`] = event.point.toString();
//         });
//         return acc;
//       }, {});
//       const departmentList = data.map((item) => ({
//         id: item.id,
//         name: item.departmentName,
//       }));

//       setStudents(departmentList);
//       setEvents(eventList);
//       setAttendance(attendanceData);
//       setGroupName("Отделения");
//       setFilterDescription(`Все отделения ${timeDescription}`);
//       setFilterType("departments");
//     }
//     setIsSidebarOpen(false);
//   } catch (error) {
//     console.error("Ошибка обработки данных фильтра:", error);
//     setError(error.message);
//     setTimeout(() => setError(null), 5000);
//   }
// };
// import FilterSidebar from "../../../pages/GroupEventTable/FilterSidebar";

{
  /* 
      <div
        className={`${styles.sidebar} ${
          isSidebarOpen ? styles.sidebarOpen : ""
        }`}
      >
        <FilterSidebar
          onFilterApply={handleFilterApply}
          onClose={toggleSidebar}
        />
        <button onClick={toggleSidebar}>Закрыть</button>
      </div>
      {isSidebarOpen && (
        <div className={styles.overlay} onClick={toggleSidebar}></div>
      )}

      <div className={styles.filterInfo}>
        <p>Текущий фильтр: {filterDescription}</p>
      </div> */
}
<button
  className={styles.filterButton}
  // onClick={toggleSidebar}
>
  Фильтры
</button>;
