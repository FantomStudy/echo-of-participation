/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedHeaderRouteImport } from './routes/_authenticated/_header'
import { Route as AuthenticatedHeaderIndexRouteImport } from './routes/_authenticated/_header/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedHeaderRoute = AuthenticatedHeaderRouteImport.update({
  id: '/_header',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedHeaderIndexRoute =
  AuthenticatedHeaderIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedHeaderRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/': typeof AuthenticatedHeaderIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/': typeof AuthenticatedHeaderIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/_header': typeof AuthenticatedHeaderRouteWithChildren
  '/_authenticated/_header/': typeof AuthenticatedHeaderIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/_header'
    | '/_authenticated/_header/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/_header': {
      id: '/_authenticated/_header'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedHeaderRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/_header/': {
      id: '/_authenticated/_header/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedHeaderIndexRouteImport
      parentRoute: typeof AuthenticatedHeaderRoute
    }
  }
}

interface AuthenticatedHeaderRouteChildren {
  AuthenticatedHeaderIndexRoute: typeof AuthenticatedHeaderIndexRoute
}

const AuthenticatedHeaderRouteChildren: AuthenticatedHeaderRouteChildren = {
  AuthenticatedHeaderIndexRoute: AuthenticatedHeaderIndexRoute,
}

const AuthenticatedHeaderRouteWithChildren =
  AuthenticatedHeaderRoute._addFileChildren(AuthenticatedHeaderRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedHeaderRoute: typeof AuthenticatedHeaderRouteWithChildren
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedHeaderRoute: AuthenticatedHeaderRouteWithChildren,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
